FORMAT: 1A
HOST: https://notify.bugsnag.com

# Error Tracking API

The Bugsnag Error Tracking API can be used to notify Bugsnag of an error or
exception in web, mobile or desktop applications.  [Official
libraries](https://docs.bugsnag.com/platforms) are available for many languages
and frameworks.

[Bugsnag](http://bugsnag.com) captures errors in real-time from your web,
mobile and desktop applications, helping you to understand and resolve them
as fast as possible. [Create a free account](http://bugsnag.com) to start
capturing exceptions from your applications.

## Notify [/]

The endpoint for sending error reports to Bugsnag.

Bugsnag does not parse or analyze requests synchronously, so there are only two
possible responses. A response code of `200` indicates that the payload was
accepted and is queued to be processed. Response code `400` indicates that the
payload was empty or too large, and `408` indicates that the payload took too
long to read from the network (30 seconds or more).

### Send error reports [POST]

+ Request (application/json)
    + Attributes
        + apiKey: `c9d60ae4c7e70c4b6c4ebd3e8056d2b8` (required, string) - The
          API Key associated with the project. Informs Bugsnag which project has
          generated this error
        + notifier (required, Notifier) - The notifier sending this payload.
          Used within Bugsnag to track error rates.
        + events (required, array[Event]) - The error events of which Bugsnag
          should be notified. A notifier can choose to group notices into an
          array to minimize network traffic or send reports individually.

+ Response 200 (application/json)

+ Response 400 (application/json)

+ Response 408 (application/json)

## Data Structures

### Application

+ type: `rails` (string)
    A specialized type for the application,
    such as the name of the worker queue, GUI toolkit, or web framework in use
+ version: `1.1.3` (string)
    The version number of the application which generated the error. If set, any
    error which is resolved on Bugsnag will not reappear until it recurs under a
    newer [semantic version](https://semver.org).
+ releaseStage: `staging` (string)
    The release cycle stage in which the error occurred, such as "production",
    "development", or "beta"

### Breadcrumb

+ name: `Opened menu` (required, string)
    A short label for the event
+ type: `navigation` (required, enum)
    The type of event
    + error
    + log
    + manual
    + navigation
    + process
    + request
    + state
    + user
+ timestamp: `2016-07-19T12:17:27-0700` (required, string)
    The time at which the event occurred, in ISO 8601 format
+ metaData (object)
    A key-value mapping between strings adding additional diagnostics to the
    event

### Device

+ hostname: `mailer-1` (string)
    The local network name
+ id: `fd124e87760c4281aef` (string)
    A unique identifier
+ locale: `en_GB` (string)
    The [locale](https://en.wikipedia.org/wiki/Locale_(computer_software)) in use,
    as represented by as [IETF language
    tag](https://en.wikipedia.org/wiki/IETF_language_tag)
+ manufacturer: `Gateway` (string)
    The manufacturer of the device
+ modelNumber: `eMachine 600` (string)
    The model number
+ osName: `OpenBSD` (string)
    The operating system name
+ osVersion: `10.12.2` (string)
    The operating system version
+ timezone: `PDT` (string)
    The timezone used the device's system clock
+ totalMemory: `8967937230` (number)
    The number of bytes on the drive running the application

### DeviceState

+ freeMemory: `2389234789` (number)
    The number of unused bytes on the drive running the application
+ time: `2016-08-04T20:00:46Z` (string)
    The time at which the error occurred, in
    [ISO 8601 format](https://tools.ietf.org/html/rfc3339#section-5.8)

### Event

+ app (Application)
    Information about the running app which had the error.
+ breadcrumbs (array[Breadcrumb])
    User actions or application events leading up to the crash
+ context: `auth/session#create` (string)
    What was happening in the application at the time of the error
+ device (Device)
    Static information about the host device running the erroring application.
+ deviceState (DeviceState)
    Transient information about the host device running the erroring
    application.
+ exceptions (required, array[Exception])
    An array of exceptions which occurred during this event. Most of the time,
    there will only be one exception, but some languages support "nested" or
    "caused by" exceptions. In this case, exceptions should be unwrapped and
    added to the array one at a time. The first exception raised should be first
    in this array.
+ groupingHash: `IOError:buggy_file.rs:42` (string)
    All errors with the same hash are grouped together within Bugsnag
+ metaData (Metadata)
    An object containing any further data you wish to attach to this
    error event. This should contain one or more objects, with each
    object being displayed in its own tab on the event details on Bugsnag.
+ payloadVersion: `3` (required, number)
    The version number of the payload.
    If less than 2, then the "severity" attribute will not be supported.
    If less than 3, then detailed breadcrumbs will not be supported.
+ threads (array[Thread])
    An array of background threads.
    This is optional but recommended for apps that rely heavily on threading.
    Threads should be in an order that makes sense for your application.
+ severity: `error` (enum)
    The severity of the report, defaulting to "error"
    + info
    + warning
    + error
+ user (User)
    Information about the user affected by the error.

### Exception

+ errorClass: `NoMethodError` (required, string)
    The class of error which occurred. This field is used to group errors
    together should it should not contain any contextual information which would
    prevent correct grouping. Ordinarily this is the exception name.
+ message: `Unable to connect to database` (string)
    The error message associated with the error.
+ stacktrace (array[Stackframe])

### Metadata

+ request (Request)

### Notifier

+ name: `Bugsnag Ruby` (required, string)
    The name of the notifier
+ version: `1.0.11` (required, string)
    The notifier's current version
+ url: `https://github.com/bugsnag/bugsnag-ruby`
    The notifier's homepage

### Request

+ clientIp: `192.168.44.0` (string)
    The IP address of the connected client
+ headers (object)
    The headers sent with the request

    ```
    {
        "Accept": "*/*",
        "Accept-Encoding": "gzip, deflate, sdch, br",
        "Accept-Language": "en-US,en;q=0.8"
    }
    ```

+ httpMethod: `PUT` (string)
    The HTTP method used
+ url: `https://example.com/some/service` (string)
    The URL of the request
+ params (object)
    Parameters sent with the request

    ```
    {
        "controller": "main",
        "action": "show",
        "id": "682728"
    }
    ```

+ referer: `http://example.com?q=awesome` (string)
    The [HTTP referer](https://en.wikipedia.org/wiki/HTTP_referer)

### Stackframe

+ file: `controllers/auth/session_controller.rb` (string)
    The file that this stack frame was executing
+ lineNumber: `1234` (number)
    The line of the file that this stack frame was executing
+ columnNumber: `12` (number)
    The column of the file that this stack frame was executing
+ method: `create` (string)
    The method which contains the executing stack frame
+ inProject: `false` (boolean)
    `true` if the stack frame file is within the user's project rather than an
    external library
+ code (object)
    The code in this file surrounding this line. You can include
    up to three lines on either side of the line that crashed.
    These will be displayed on Bugsnag when you expand that line.

    ```
    {
        "1231": "  def a",
        "1232": "",
        "1233": "    if problem?",
        "1234": "      raise 'something went wrong'",
        "1235": "    end"
        "1236": "",
        "1237": "  end"
    }
    ```

### Thread

+ id: `thread_id` (string)
    The id of the thread in your application
+ name: `thread_name` (string)
    A human readable name for the thread
+ stacktrace (array[Stackframe])

### User

+ id: `19` (string)
    A unique identifier for a user affected by this event
+ name: `Robert Hawkins` (string)
    The user's name
+ email: `bob@example.com` (string)
    The user's email
